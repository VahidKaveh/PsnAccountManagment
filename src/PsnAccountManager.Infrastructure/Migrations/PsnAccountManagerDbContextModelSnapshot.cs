// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PsnAccountManager.Infrastructure.Data;

#nullable disable

namespace PsnAccountManager.Infrastructure.Migrations
{
    [DbContext(typeof(PsnAccountManagerDbContext))]
    partial class PsnAccountManagerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Capacity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("GuaranteeMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("HasOriginalMail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastScrapedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("PricePs4")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("PricePs5")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("RecentChanges")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Region")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SellerInfo")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StockStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId", "ExternalId")
                        .IsUnique();

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.AccountGame", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<int>("GameId")
                        .HasColumnType("int")
                        .HasColumnName("game_id");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_primary");

                    b.HasKey("AccountId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("AccountGames", (string)null);
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.AccountHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NewValue")
                        .HasColumnType("longtext");

                    b.Property<string>("OldValue")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountHistories", (string)null);
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.AdminNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("LinkUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AdminNotifications", (string)null);
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.Channel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("channel_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DelayAfterScrapeMs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1000);

                    b.Property<string>("FetchMode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("SinceLastMessage");

                    b.Property<int?>("FetchValue")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastScrapedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_scraped_at");

                    b.Property<int?>("LastScrapedMessageId")
                        .HasColumnType("int")
                        .HasColumnName("last_scraped_message_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<int?>("ParsingProfileId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("ParsingProfileId");

                    b.ToTable("Channels", (string)null);
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.Dispute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("dispute_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int")
                        .HasColumnName("purchase_id");

                    b.Property<int>("RaisedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("raised_by");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("reason");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("RaisedByUserId");

                    b.ToTable("Disputes", (string)null);
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("game_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PosterUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("poster_url");

                    b.Property<string>("Region")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("region");

                    b.Property<string>("SonyCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("sony_code");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Games", (string)null);
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.Guide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("guide_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("MediaUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("media_url");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("Guides", (string)null);
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.ParsingProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ParsingProfiles", (string)null);
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.ParsingProfileRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FieldType")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ParsingProfileId")
                        .HasColumnType("int");

                    b.Property<string>("RegexPattern")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ParsingProfileId", "FieldType")
                        .IsUnique();

                    b.ToTable("ParsingProfileRules", (string)null);
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("provider");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int")
                        .HasColumnName("purchase_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseId");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("BuyerUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<int>("SellerChannelId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BuyerUserId");

                    b.HasIndex("SellerChannelId");

                    b.ToTable("Purchases", (string)null);
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.PurchaseSuggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("suggestion_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<string>("MatchedGames")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("matched_games");

                    b.Property<double>("Rank")
                        .HasColumnType("double")
                        .HasColumnName("rank");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("PurchaseSuggestions", (string)null);
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.RawMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<long>("ExternalMessageId")
                        .HasColumnType("bigint");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId", "ExternalMessageId")
                        .IsUnique();

                    b.ToTable("RawMessages", (string)null);
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.RequestGame", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    b.Property<int>("GameId")
                        .HasColumnType("int")
                        .HasColumnName("game_id");

                    b.HasKey("RequestId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("RequestGames", (string)null);
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.Setting", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("key");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.HasKey("Key");

                    b.ToTable("Settings", (string)null);

                    b.HasData(
                        new
                        {
                            Key = "Matcher.MinMatchedGames",
                            Value = "1"
                        },
                        new
                        {
                            Key = "Matcher.MaxSuggestions",
                            Value = "5"
                        },
                        new
                        {
                            Key = "Matcher.SuggestionSortOrder",
                            Value = "ByMatchedGames"
                        },
                        new
                        {
                            Key = "ScraperWorker.ScrapeIntervalMinutes",
                            Value = "15"
                        });
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LastActiveAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_active_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<long>("TelegramId")
                        .HasColumnType("bigint")
                        .HasColumnName("telegram_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("TelegramId")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.Wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("wishlist_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("int")
                        .HasColumnName("game_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId", "GameId")
                        .IsUnique();

                    b.ToTable("Wishlist", (string)null);
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.Account", b =>
                {
                    b.HasOne("PsnAccountManager.Domain.Entities.Channel", "Channel")
                        .WithMany("Accounts")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.AccountGame", b =>
                {
                    b.HasOne("PsnAccountManager.Domain.Entities.Account", "Account")
                        .WithMany("AccountGames")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PsnAccountManager.Domain.Entities.Game", "Game")
                        .WithMany("AccountGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.AccountHistory", b =>
                {
                    b.HasOne("PsnAccountManager.Domain.Entities.Account", "Account")
                        .WithMany("History")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.Channel", b =>
                {
                    b.HasOne("PsnAccountManager.Domain.Entities.ParsingProfile", "ParsingProfile")
                        .WithMany("Channels")
                        .HasForeignKey("ParsingProfileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ParsingProfile");
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.Dispute", b =>
                {
                    b.HasOne("PsnAccountManager.Domain.Entities.Purchase", "Purchase")
                        .WithMany("Disputes")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PsnAccountManager.Domain.Entities.User", "RaisedBy")
                        .WithMany()
                        .HasForeignKey("RaisedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Purchase");

                    b.Navigation("RaisedBy");
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.ParsingProfileRule", b =>
                {
                    b.HasOne("PsnAccountManager.Domain.Entities.ParsingProfile", "Profile")
                        .WithMany("Rules")
                        .HasForeignKey("ParsingProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.Payment", b =>
                {
                    b.HasOne("PsnAccountManager.Domain.Entities.Purchase", "Purchase")
                        .WithMany("Payments")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.Purchase", b =>
                {
                    b.HasOne("PsnAccountManager.Domain.Entities.Account", "Account")
                        .WithMany("Purchases")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PsnAccountManager.Domain.Entities.User", "Buyer")
                        .WithMany("Purchases")
                        .HasForeignKey("BuyerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PsnAccountManager.Domain.Entities.Channel", "SellerChannel")
                        .WithMany("Sales")
                        .HasForeignKey("SellerChannelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Buyer");

                    b.Navigation("SellerChannel");
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.PurchaseSuggestion", b =>
                {
                    b.HasOne("PsnAccountManager.Domain.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PsnAccountManager.Domain.Entities.Request", "Request")
                        .WithMany("Suggestions")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PsnAccountManager.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.RawMessage", b =>
                {
                    b.HasOne("PsnAccountManager.Domain.Entities.Channel", "Channel")
                        .WithMany("RawMessages")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.Request", b =>
                {
                    b.HasOne("PsnAccountManager.Domain.Entities.User", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.RequestGame", b =>
                {
                    b.HasOne("PsnAccountManager.Domain.Entities.Game", "Game")
                        .WithMany("RequestGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PsnAccountManager.Domain.Entities.Request", "Request")
                        .WithMany("RequestGames")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.Wishlist", b =>
                {
                    b.HasOne("PsnAccountManager.Domain.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PsnAccountManager.Domain.Entities.User", "User")
                        .WithMany("Wishlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.Account", b =>
                {
                    b.Navigation("AccountGames");

                    b.Navigation("History");

                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.Channel", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("RawMessages");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.Game", b =>
                {
                    b.Navigation("AccountGames");

                    b.Navigation("RequestGames");
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.ParsingProfile", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("Rules");
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.Purchase", b =>
                {
                    b.Navigation("Disputes");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.Request", b =>
                {
                    b.Navigation("RequestGames");

                    b.Navigation("Suggestions");
                });

            modelBuilder.Entity("PsnAccountManager.Domain.Entities.User", b =>
                {
                    b.Navigation("Purchases");

                    b.Navigation("Requests");

                    b.Navigation("Wishlists");
                });
#pragma warning restore 612, 618
        }
    }
}

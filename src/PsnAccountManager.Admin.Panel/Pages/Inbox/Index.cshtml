@page
@model PsnAccountManager.Admin.Panel.Pages.Inbox.IndexModel
@{
    ViewData["Title"] = "Message Inbox";
}

@if (!string.IsNullOrEmpty(Model.StatusMessage))
{
    <div class="row">
        <div class="col-12">
            <div class="alert alert-info alert-dismissible">
                <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                @Model.StatusMessage
            </div>
        </div>
    </div>
}

<div class="row">
    <div class="col-12">
        <div class="card card-primary card-outline">
            <!-- Tab Headers -->
            <div class="card-header p-0 pt-1">
                <ul class="nav nav-tabs" id="inbox-tabs" role="tablist">
                    <li class="nav-item">
                        <a class="nav-link @(Model.ActiveTab == "messages" ? "active" : "")"
                           href="?tab=messages">
                            <i class="fas fa-envelope mr-1"></i>
                            Messages
                            @if (Model.TotalPendingMessages > 0)
                            {
                                <span class="badge badge-warning ml-1">@Model.TotalPendingMessages</span>
                            }
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link @(Model.ActiveTab == "changes" ? "active" : "")"
                           href="?tab=changes">
                            <i class="fas fa-edit mr-1"></i>
                            Changes
                            @if (Model.TotalPendingChanges > 0)
                            {
                                <span class="badge badge-danger ml-1">@Model.TotalPendingChanges</span>
                            }
                        </a>
                    </li>
                </ul>
            </div>

            <!-- Tab Content -->
            <div class="card-body p-0">
                @if (Model.ActiveTab == "changes")
                {
                    <!-- Changes Tab -->
                    @if (Model.PendingChanges != null && Model.PendingChanges.Any())
                    {
                        <div class="alert alert-info m-3">
                            <i class="fas fa-info-circle mr-2"></i>
                            <strong>Account Changes Detected (@Model.TotalPendingChanges):</strong> These changes were automatically detected and require your review before processing.
                        </div>

                        @foreach (var change in Model.PendingChanges)
                        {
                            var changeDetails = Model.GetChangeDetails(change);

                            <div class="card card-outline m-3 mb-3">
                                <div class="card-header">
                                    <div class="row">
                                        <div class="col-md-8">
                                            <h6 class="card-title mb-0">
                                                <i class="fas fa-exchange-alt text-warning mr-2"></i>
                                                Change Detected in <strong>@(change.Channel?.Name ?? "Unknown Channel")</strong>
                                            </h6>
                                            <small class="text-muted">External ID: @change.ExternalMessageId</small>
                                        </div>
                                        <div class="col-md-4 text-right">
                                            @if (changeDetails != null)
                                            {
                                                <span class="badge @Model.GetChangeTypeBadgeClass(changeDetails.ChangeType) mr-2">
                                                    @changeDetails.ChangeType
                                                </span>
                                            }
                                            <br />
                                            <small class="text-muted">@change.CreatedAt.ToString("yyyy-MM-dd HH:mm")</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-8">
                                            @if (changeDetails != null && changeDetails.HasChanges)
                                            {
                                                <h6><i class="fas fa-list mr-1"></i>Changes Detected:</h6>
                                                <ul class="list-unstyled mb-3">
                                                    @foreach (var fieldChange in changeDetails.Changes.Take(5))
                                                    {
                                                        <li class="mb-1">
                                                            <strong>@fieldChange.Field:</strong>
                                                            <span class="text-muted">@(fieldChange.OldValue ?? "N/A")</span>
                                                            <i class="fas fa-arrow-right mx-2 text-info"></i>
                                                            <span class="text-success">@(fieldChange.NewValue ?? "N/A")</span>
                                                        </li>
                                                    }
                                                    @if (changeDetails.Changes.Count > 5)
                                                    {
                                                        <li class="text-muted">... and @(changeDetails.Changes.Count - 5) more changes</li>
                                                    }
                                                </ul>
                                            }

                                            <div class="mt-3">
                                                <h6><i class="fas fa-file-alt mr-1"></i>Message Preview:</h6>
                                                <div class="bg-light p-2 rounded" style="max-height: 100px; overflow-y: auto;">
                                                    <small>@change.MessageText.Substring(0, Math.Min(change.MessageText.Length, 200))...</small>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="text-center">
                                                <h6>Actions:</h6>
                                                <form method="post" class="d-inline w-100 mb-2">
                                                    @Html.AntiForgeryToken()
                                                    <input type="hidden" name="messageId" value="@change.Id" />
                                                    <button type="submit" asp-page-handler="ApproveChange"
                                                            class="btn btn-success btn-sm btn-block"
                                                            onclick="return confirm('Approve this change for processing?')">
                                                        <i class="fas fa-check mr-1"></i> Approve & Process
                                                    </button>
                                                </form>
                                                <form method="post" class="d-inline w-100 mb-2">
                                                    @Html.AntiForgeryToken()
                                                    <input type="hidden" name="messageId" value="@change.Id" />
                                                    <button type="submit" asp-page-handler="IgnoreChange"
                                                            class="btn btn-secondary btn-sm btn-block"
                                                            onclick="return confirm('Ignore this change?')">
                                                        <i class="fas fa-times mr-1"></i> Ignore Change
                                                    </button>
                                                </form>
                                                <a href="/Admin/Messages/@change.Id" class="btn btn-outline-info btn-sm btn-block">
                                                    <i class="fas fa-eye mr-1"></i> View Details
                                                </a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="p-4 text-center text-muted">
                            <i class="fas fa-check-circle text-success fa-3x mb-3"></i>
                            <h5>No Changes Pending Review</h5>
                            <p>All detected changes have been processed or there are no changes detected yet.</p>
                        </div>
                    }
                }
                else
                {
                    <!-- Messages Tab -->
                    @if (Model.Messages != null && Model.Messages.Any())
                    {
                        <div class="alert alert-info m-3">
                            <i class="fas fa-inbox mr-2"></i>
                            <strong>Pending Messages (@Model.TotalPendingMessages):</strong> These messages are waiting to be processed.
                        </div>

                        <div class="table-responsive">
                            <table class="table table-hover table-striped">
                                <tbody>
                                    @foreach (var msg in Model.Messages)
                                    {
                                        <tr>
                                            <td class="col-2 align-middle">
                                                <strong>Channel:</strong> <span class="channel-name" data-channel-id="@msg.ChannelId">@(msg.Channel?.Name ?? "N/A")</span><br />
                                                <small class="text-muted">Received: @msg.ReceivedAt.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</small>
                                            </td>
                                            <td class="col-8">
                                                <pre class="mb-0" style="white-space: pre-wrap; font-size: 0.9rem;">@msg.MessageText</pre>
                                            </td>
                                            <td class="col-2 text-right align-middle">
                                                <button class="btn btn-sm btn-success w-100 mb-2 process-btn" data-message-id="@msg.Id" data-channel-name="@(msg.Channel?.Name ?? "N/A")">
                                                    <i class="fas fa-cogs"></i> Process
                                                </button>
                                                <form method="post" class="d-inline w-100">
                                                    @Html.AntiForgeryToken()
                                                    <button type="submit" asp-page-handler="Ignore" asp-route-id="@msg.Id" class="btn btn-sm btn-warning w-100" onclick="return confirm('Are you sure you want to ignore this message?');">
                                                        <i class="fas fa-eye-slash"></i> Ignore
                                                    </button>
                                                </form>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="p-4 text-center text-muted">
                            <h5><i class="fas fa-check-circle"></i> Inbox Zero!</h5>
                            <p>There are no pending messages to review.</p>
                        </div>
                    }
                }
            </div>

            <!-- Pagination -->
            @if (Model.TotalPages > 1)
            {
                <div class="card-footer clearfix">
                    <ul class="pagination pagination-sm m-0 float-right">
                        @for (var i = 1; i <= Model.TotalPages; i++)
                        {
                            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                <a asp-page="./Index" asp-route-tab="@Model.ActiveTab" asp-route-CurrentPage="@i" class="page-link">@i</a>
                            </li>
                        }
                    </ul>
                </div>
            }
        </div>
    </div>
</div>

<!-- Process Modal -->
<div class="modal fade" id="processModal" tabindex="-1" role="dialog" aria-labelledby="processModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="processModalLabel">Process Message</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" style="max-height: 75vh; overflow-y: auto;">
                <div id="modal-spinner" class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                    <p class="mt-2">Processing...</p>
                </div>
                <div id="modal-content-area" style="display: none;"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal"><i class="fas fa-times"></i> Cancel</button>
                <button type="button" class="btn btn-primary" id="saveAccountBtn"><i class="fas fa-save"></i> Save Account</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            let shouldReloadPage = false;
            let isProcessing = false;
            let currentChannelName = 'N/A';

            $('body').on('click', '.process-btn', function(e) {
                e.preventDefault();
                currentChannelName = $(this).data('channel-name');
                loadMessageForProcessing($(this).data('message-id'));
            });

            $(document).on('click', '.delete-game-btn', function() {
                $(this).closest('li').remove();
                updateGameCount();
            });

            $('#modal-content-area').on('click', '#add-game-btn', function() {
                const newItem = createGameListItem('', false);
                $('#games-list').append(newItem);
                $('#no-games-msg').remove();
                updateGameCount();
            });

            $('#saveAccountBtn').on('click', saveAccount);

            $('#processModal').on('hidden.bs.modal', () => {
                if (shouldReloadPage) {
                    showToast('Reloading page...', 'info');
                    setTimeout(() => window.location.reload(), 1000);
                }
            });

            function loadMessageForProcessing(messageId) {
                shouldReloadPage = false;
                isProcessing = false;

                $('#modal-spinner').show();
                $('#modal-content-area').hide();
                $('#processModalLabel').text('Processing Message ID: ' + messageId);
                $('#processModal').modal('show');

                $.ajax({
                    url: `/Inbox?handler=ProcessPreview&id=${messageId}`,
                    type: 'GET',
                    success: (response) => {
                        if (response && response.success && response.data) {
                            setupModalContent(response.data);
                        } else {
                            showError(response.message || 'An unknown error occurred.');
                        }
                    },
                    error: () => showError('Server error occurred.'),
                    complete: () => {
                        $('#modal-spinner').hide();
                        $('#modal-content-area').show();
                    }
                });
            }

            function setupModalContent(data) {
                const sortedGames = data.games ? data.games.sort((a, b) => a.existsInDb - b.existsInDb) : [];
                const gamesHtml = sortedGames.length > 0
                    ? sortedGames.map(game => createGameListItem(game.title, game.existsInDb)).join('')
                    : '<li class="list-group-item text-muted text-center" id="no-games-msg">No games detected.</li>';

                const contentHtml = `
                    <div class="row">
                        <div class="col-md-5">
                            <div class="card card-outline card-info">
                                <div class="card-header"><h5 class="card-title"><i class="fas fa-envelope"></i> Original Message</h5></div>
                                <div class="card-body" style="max-height: 60vh; overflow-y: auto;">
                                    <pre style="white-space: pre-wrap; font-size: 0.85rem;">${safeValue(data.fullDescription)}</pre>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-7">
                            <div class="card card-outline card-success">
                                <div class="card-header"><h5 class="card-title"><i class="fas fa-cog"></i> Extracted Data</h5></div>
                                <div class="card-body" style="max-height: 60vh; overflow-y: auto;">
                                    <form id="processForm">
                                        <input type="hidden" id="form-rawMessageId" value="${data.rawMessageId}" />
                                        <div class="form-group"><label class="font-weight-bold"><i class="fas fa-tag"></i> Title</label><input type="text" id="form-title" class="form-control" readonly /></div>
                                        <div class="row">
                                            <div class="col-md-6"><div class="form-group"><label><i class="fab fa-playstation"></i> Price PS4</label><input type="number" step="0.01" id="form-pricePs4" class="form-control" value="${safeValue(data.pricePs4)}"/></div></div>
                                            <div class="col-md-6"><div class="form-group"><label><i class="fab fa-playstation"></i> Price PS5</label><input type="number" step="0.01" id="form-pricePs5" class="form-control" value="${safeValue(data.pricePs5)}"/></div></div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6"><div class="form-group"><label><i class="fas fa-globe"></i> Region</label><input type="text" id="form-region" class="form-control" value="${safeValue(data.region)}"/></div></div>
                                            <div class="col-md-6">
                                                <div class="form-group">
                                                    <label for="form-capacity"><i class="fas fa-hdd"></i> Capacity</label>
                                                    <select id="form-capacity" class="form-control">
                                                        <option value="Unknown" ${data.capacity === 'Unknown' ? 'selected' : ''}>Unknown</option>
                                                        <option value="Z1" ${data.capacity === 'Z1' ? 'selected' : ''}>Z1 (Offline Only)</option>
                                                        <option value="Z2" ${data.capacity === 'Z2' ? 'selected' : ''}>Z2 (Online & Offline)</option>
                                                        <option value="Z3" ${data.capacity === 'Z3' ? 'selected' : ''}>Z3 (Online Only)</option>
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-group"><label><i class="fas fa-user-tie"></i> Seller Info</label><input type="text" id="form-sellerInfo" class="form-control" value="${safeValue(data.sellerInfo)}"/></div>
                                        <div class="form-group"><label><i class="fas fa-info-circle"></i> Additional Info</label><textarea id="form-additionalInfo" class="form-control" rows="2">${safeValue(data.additionalInfo)}</textarea></div>
                                        <hr/>
                                        <div class="form-group"><label class="font-weight-bold"><i class="fas fa-gamepad"></i> Games (<span id="games-count">0</span>)</label><ul class="list-group mb-2" id="games-list">${gamesHtml}</ul><button type="button" class="btn btn-sm btn-outline-primary" id="add-game-btn"><i class="fas fa-plus"></i> Add Game</button></div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>`;
                $('#modal-content-area').html(contentHtml);
                updateGameCount();
            }

            function createGameListItem(title, existsInDb) {
                const safeTitle = safeValue(title);
                const itemClass = existsInDb ? 'list-group-item-success' : '';
                const inputHtml = existsInDb
                    ? `<input type="text" class="form-control form-control-sm" value="${safeTitle}" readonly><input type="hidden" class="game-title-input" value="${safeTitle}">`
                    : `<input type="text" class="form-control form-control-sm game-title-input" value="${safeTitle}" placeholder="Enter game title">`;

                return `<li class="list-group-item d-flex justify-content-between align-items-center p-2 ${itemClass}"><div class="flex-grow-1 mr-2">${inputHtml}</div><button type="button" class="btn btn-sm btn-danger delete-game-btn" title="Remove"><i class="fas fa-times"></i></button></li>`;
            }

            function saveAccount() {
                if (isProcessing) return;
                isProcessing = true;
                showLoadingState(true);

                const form = $('#processForm');
                const formData = {
                    rawMessageId: parseInt(form.find('#form-rawMessageId').val()),
                    title: form.find('#form-title').val().trim(),
                    pricePs4: parseFloat(form.find('#form-pricePs4').val()) || null,
                    pricePs5: parseFloat(form.find('#form-pricePs5').val()) || null,
                    region: form.find('#form-region').val().trim(),
                    capacity: form.find('#form-capacity').val(),
                    sellerInfo: form.find('#form-sellerInfo').val().trim(),
                    additionalInfo: form.find('#form-additionalInfo').val().trim(),
                    gameTitles: Array.from($('#games-list .game-title-input')).map(el => $(el).val().trim()).filter(Boolean)
                };

                if (!formData.title) {
                    showToast('Title cannot be empty.', 'error');
                    isProcessing = false;
                    showLoadingState(false);
                    return;
                }

                if (!formData.rawMessageId || formData.rawMessageId <= 0) {
                    showToast('Invalid message ID.', 'error');
                    isProcessing = false;
                    showLoadingState(false);
                    return;
                }

                $.ajax({
                    url: '/Inbox?handler=ProcessAndSave',
                    type: 'POST',
                    contentType: 'application/json',
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    data: JSON.stringify(formData),
                    success: (response) => {
                        if (response.success) {
                            shouldReloadPage = true;
                            showToast('Account saved successfully!', 'success');
                            $('#processModal').modal('hide');
                        } else {
                            showToast(response.message || "An unknown error occurred.", 'error');
                        }
                    },
                    error: (xhr, status, error) => {
                        showToast(`Server error: ${error}`, 'error');
                    },
                    complete: () => {
                        isProcessing = false;
                        showLoadingState(false);
                    }
                });
            }

            function updateGameCount() {
                const count = $('#games-list .game-title-input').length;
                $('#games-count').text(count);
                if(count === 0 && $('#no-games-msg').length === 0){
                    $('#games-list').html('<li class="list-group-item text-muted text-center" id="no-games-msg">No games detected.</li>');
                }
                updateDynamicTitle();
            }

            function updateDynamicTitle() {
                const gameCount = $('#games-list .game-title-input').length;
                $('#form-title').val(`${currentChannelName} - ${gameCount} Games`);
            }

            function safeValue(value, fallback = '') {
                return value !== null && value !== undefined ? String(value).replace(/"/g, '&quot;') : fallback;
            }

            function showError(message) {
                $('#modal-content-area').html(`<div class="alert alert-danger"><i class="fas fa-exclamation-triangle"></i> ${message}</div>`);
            }

            function showLoadingState(show) {
                const btn = $('#saveAccountBtn');
                btn.prop('disabled', show);
                btn.html(show ? '<i class="fas fa-spinner fa-spin"></i> Saving...' : '<i class="fas fa-save"></i> Save Account');
            }

            function showToast(message, type = 'success') {
                if (typeof $(document).Toasts === 'function') {
                    $(document).Toasts('create', {
                        class: `bg-${type === 'success' ? 'success' : 'danger'}`,
                        title: type.charAt(0).toUpperCase() + type.slice(1),
                        subtitle: 'Just now',
                        body: message,
                        autohide: true,
                        delay: 3000,
                    });
                } else {
                    alert(`[${type.toUpperCase()}] ${message}`);
                }
            }
        });
    </script>
}

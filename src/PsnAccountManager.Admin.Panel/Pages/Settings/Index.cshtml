@page
@model PsnAccountManager.Admin.Panel.Pages.Settings.IndexModel
@{
    ViewData["Title"] = "Application Settings";
}

<!-- Content Header (Page header) -->
<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0">
                    <i class="fas fa-cogs text-primary mr-2"></i>Application Settings
                </h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a asp-page="/Index">Home</a></li>
                    <li class="breadcrumb-item active">Settings</li>
                </ol>
            </div>
        </div>
    </div>
</div>

<!-- Display Status Message if it exists -->
@if (!string.IsNullOrEmpty(Model.StatusMessage))
{
    <div class="alert alert-success alert-dismissible">
        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
        <h5><i class="icon fas fa-check"></i> Success!</h5>
        @Model.StatusMessage
    </div>
}

<!-- Main content -->
<div class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <div class="card card-primary card-outline">
                    <div class="card-header">
                        <h3 class="card-title">
                            <i class="fas fa-sliders-h mr-2"></i>Manage Application Settings
                        </h3>
                        <div class="card-tools">
                            <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                <i class="fas fa-minus"></i>
                            </button>
                        </div>
                    </div>

                    <form method="post" id="settingsForm">
                        <div class="card-body">
                            @if (Model.Settings != null && Model.Settings.Any())
                            {
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text"><i class="fas fa-search"></i></span>
                                            </div>
                                            <input type="text" class="form-control" placeholder="Search settings..." id="searchSettings">
                                        </div>
                                    </div>
                                    <div class="col-md-6 text-right">
                                        <small class="text-muted">
                                            <i class="fas fa-info-circle mr-1"></i>
                                            Total Settings: <strong>@Model.Settings.Count</strong>
                                        </small>
                                    </div>
                                </div>

                                <div class="table-responsive">
                                    <table class="table table-bordered table-striped table-hover" id="settingsTable">
                                        <thead class="thead-light">
                                            <tr>
                                                <th style="width: 25%;">
                                                    <i class="fas fa-key mr-1"></i>Setting Key
                                                </th>
                                                <th style="width: 30%;">
                                                    <i class="fas fa-edit mr-1"></i>Value
                                                </th>
                                                <th>
                                                    <i class="fas fa-info-circle mr-1"></i>Description
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @for (var i = 0; i < Model.Settings.Count; i++)
                                            {
                                                <tr class="setting-row">
                                                    <td>
                                                        <strong class="setting-key">@Model.Settings[i].Key</strong>
                                                        <input type="hidden" asp-for="Settings[i].Key" />
                                                    </td>
                                                    <td>
                                                        @if (IsNumericSetting(Model.Settings[i].Key))
                                                        {
                                                            <input asp-for="Settings[i].Value" class="form-control" type="number"
                                                                   min="0" max="999999" step="1" />
                                                        }
                                                        else if (IsSelectSetting(Model.Settings[i].Key))
                                                        {
                                                            <select asp-for="Settings[i].Value" class="form-control">
                                                                @foreach (var option in GetSelectOptions(Model.Settings[i].Key))
                                                                {
                                                                    <option value="@option" selected="@(option == Model.Settings[i].Value)">@option</option>
                                                                }
                                                            </select>
                                                        }
                                                        else
                                                        {
                                                            <input asp-for="Settings[i].Value" class="form-control" />
                                                        }
                                                        <span asp-validation-for="Settings[i].Value" class="text-danger"></span>
                                                    </td>
                                                    <td>
                                                        <small class="text-muted setting-description">
                                                            <i class="fas fa-info mr-1"></i>
                                                            @GetDescription(Model.Settings[i].Key)
                                                        </small>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="callout callout-warning">
                                    <h5><i class="icon fas fa-exclamation-triangle"></i> No Settings Found!</h5>
                                    <p>There are no application settings in the database to configure. Please run the initial data seeding migration.</p>
                                </div>
                            }
                        </div>

                        @if (Model.Settings != null && Model.Settings.Any())
                        {
                            <div class="card-footer bg-light">
                                <div class="row">
                                    <div class="col-md-6">
                                        <button type="submit" class="btn btn-primary">
                                            <i class="fas fa-save mr-1"></i> Save All Changes
                                        </button>
                                        <button type="button" class="btn btn-secondary ml-2" onclick="resetForm()">
                                            <i class="fas fa-undo mr-1"></i> Reset
                                        </button>
                                    </div>
                                    <div class="col-md-6 text-right">
                                        <small class="text-muted">
                                            <i class="fas fa-clock mr-1"></i>
                                            Changes will take effect immediately after saving.
                                        </small>
                                    </div>
                                </div>
                            </div>
                        }
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    private string GetDescription(string key)
    {
        return key switch
        {
            "Matcher.MinMatchedGames" => "The minimum number of games an account must have in common with a user's request to be considered a primary match.",
            "Matcher.MaxSuggestions" => "The maximum number of account suggestions to provide for a single user request.",
            "Matcher.SuggestionSortOrder" => "The method for sorting secondary suggestions. Options: 'ByPrice', 'ByMatchedGames', 'None'.",
            "ScraperWorker.ScrapeIntervalMinutes" => "The interval in minutes between each scrape cycle for all channels.",
            "ScraperWorker.DelayBetweenChannelsMs" => "Delay in milliseconds between scraping different channels to avoid rate limiting.",
            "Telegram.ApiId" => "Your Telegram API ID obtained from https://my.telegram.org/apps",
            "Telegram.ApiHash" => "Your Telegram API Hash obtained from https://my.telegram.org/apps",
            _ => "No description available for this setting."
        };
    }

    private bool IsNumericSetting(string key)
    {
        return key.Contains("Minutes") || key.Contains("Max") || key.Contains("Min") ||
               key.Contains("Delay") || key.Contains("Interval") || key.Contains("Count");
    }

    private bool IsSelectSetting(string key)
    {
        return key.Contains("SortOrder") || key.Contains("Mode") || key.Contains("Type");
    }

    private string[] GetSelectOptions(string key)
    {
        return key switch
        {
            "Matcher.SuggestionSortOrder" => new[] { "ByPrice", "ByMatchedGames", "None" },
            _ => new string[0]
        };
    }
}

@section Scripts {
    <script>
        $(document).ready(function() {
            // Search functionality
            $('#searchSettings').on('keyup', function() {
                var value = $(this).val().toLowerCase();
                $('#settingsTable tbody tr').filter(function() {
                    var keyMatch = $(this).find('.setting-key').text().toLowerCase().indexOf(value) > -1;
                    var descMatch = $(this).find('.setting-description').text().toLowerCase().indexOf(value) > -1;
                    $(this).toggle(keyMatch || descMatch);
                });
            });

            // Form submission with loading state
            $('#settingsForm').on('submit', function(e) {
                var submitBtn = $(this).find('button[type="submit"]');
                submitBtn.prop('disabled', true)
                    .html('<i class="fas fa-spinner fa-spin mr-1"></i> Saving...');

                // Re-enable after a delay if form doesn't redirect
                setTimeout(function() {
                    submitBtn.prop('disabled', false)
                        .html('<i class="fas fa-save mr-1"></i> Save All Changes');
                }, 3000);
            });

            // Add change detection
            var originalFormData = $('#settingsForm').serialize();
            var hasChanges = false;

            $('#settingsForm input, #settingsForm select').on('change', function() {
                hasChanges = $('#settingsForm').serialize() !== originalFormData;
                updateSaveButton(hasChanges);
            });

            function updateSaveButton(changed) {
                var saveBtn = $('#settingsForm button[type="submit"]');
                if (changed) {
                    saveBtn.removeClass('btn-primary').addClass('btn-warning')
                        .html('<i class="fas fa-exclamation-triangle mr-1"></i> Save Changes');
                } else {
                    saveBtn.removeClass('btn-warning').addClass('btn-primary')
                        .html('<i class="fas fa-save mr-1"></i> Save All Changes');
                }
            }

            // Highlight changed inputs
            $('#settingsForm input, #settingsForm select').on('input change', function() {
                $(this).addClass('border-warning');
            });
        });

        function resetForm() {
            if (confirm('Are you sure you want to reset all changes?')) {
                location.reload();
            }
        }
    </script>
}
